import { useState, useEffect, useRef } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Badge } from "@/components/ui/badge";
import { Clock, Upload, CheckCircle, X, Download, AlertCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface QRPaymentModalProps {
  isOpen: boolean;
  onClose: () => void;
  onPaymentConfirm: (screenshot: File) => void;
  orderAmount: number;
  orderId?: string;
}

export default function QRPaymentModal({ isOpen, onClose, onPaymentConfirm, orderAmount, orderId }: QRPaymentModalProps) {
  const [timeLeft, setTimeLeft] = useState(300); // 5 minutes in seconds
  const [screenshot, setScreenshot] = useState<File | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const [dragActive, setDragActive] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  // QR Code data - in a real implementation, this would be generated by your payment processor
  const qrCodeData = `upi://pay?pa=lifesteal@paytm&pn=LifeSteal Server&am=${orderAmount}&cu=USD&tn=Order ${orderId?.slice(0, 8) || 'TEMP'}`;
  
  // Generate QR code URL using qr-server.com API
  const qrCodeUrl = `https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=${encodeURIComponent(qrCodeData)}`;

  useEffect(() => {
    if (!isOpen) {
      setTimeLeft(300);
      setScreenshot(null);
      return;
    }

    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          clearInterval(timer);
          toast({
            title: "Payment Session Expired",
            description: "The QR code has expired. Please try again.",
            variant: "destructive",
          });
          onClose();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [isOpen, onClose, toast]);

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      handleFileSelect(e.dataTransfer.files[0]);
    }
  };

  const handleFileSelect = (file: File) => {
    if (!file.type.startsWith('image/')) {
      toast({
        title: "Invalid File Type",
        description: "Please upload an image file (PNG, JPG, etc.)",
        variant: "destructive",
      });
      return;
    }

    if (file.size > 5 * 1024 * 1024) { // 5MB limit
      toast({
        title: "File Too Large",
        description: "Please upload an image smaller than 5MB",
        variant: "destructive",
      });
      return;
    }

    setScreenshot(file);
  };

  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      handleFileSelect(e.target.files[0]);
    }
  };

  const handleSubmitPayment = async () => {
    if (!screenshot) {
      toast({
        title: "Screenshot Required",
        description: "Please upload a screenshot of your payment confirmation",
        variant: "destructive",
      });
      return;
    }

    setIsUploading(true);
    try {
      await onPaymentConfirm(screenshot);
    } catch (error) {
      toast({
        title: "Upload Failed",
        description: "Failed to submit payment confirmation. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsUploading(false);
    }
  };

  const downloadQRCode = async () => {
    try {
      const response = await fetch(qrCodeUrl);
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `payment-qr-${orderId?.slice(0, 8) || 'temp'}.png`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
      toast({
        title: "QR Code Downloaded",
        description: "You can now scan it with your payment app",
      });
    } catch (error) {
      toast({
        title: "Download Failed",
        description: "Could not download QR code",
        variant: "destructive",
      });
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl bg-black/90 border-green-500/20 text-white">
        <DialogHeader>
          <DialogTitle className="text-2xl font-bold text-green-400 flex items-center gap-2">
            <CheckCircle className="w-6 h-6" />
            Complete Your Payment
          </DialogTitle>
        </DialogHeader>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* QR Code Section */}
          <Card className="bg-black/40 border-green-500/20">
            <CardHeader>
              <CardTitle className="text-white flex items-center justify-between">
                <span>Scan QR Code</span>
                <Badge variant="outline" className="border-red-500 text-red-400">
                  <Clock className="w-3 h-3 mr-1" />
                  {formatTime(timeLeft)}
                </Badge>
              </CardTitle>
            </CardHeader>
            <CardContent className="text-center space-y-4">
              <div className="bg-white p-4 rounded-lg mx-auto w-fit">
                <img 
                  src={qrCodeUrl} 
                  alt="Payment QR Code" 
                  className="w-48 h-48 mx-auto"
                />
              </div>
              
              <div className="space-y-2">
                <p className="text-green-400 font-bold text-xl">${orderAmount.toFixed(2)}</p>
                <p className="text-gray-400 text-sm">Scan with your payment app</p>
                
                <Button
                  onClick={downloadQRCode}
                  variant="outline"
                  size="sm"
                  className="border-green-500/30 text-green-400 hover:bg-green-500 hover:text-black"
                >
                  <Download className="w-4 h-4 mr-2" />
                  Download QR Code
                </Button>
              </div>

              <div className="bg-yellow-900/20 border border-yellow-500/30 rounded-lg p-3 text-xs">
                <div className="flex items-center gap-2 text-yellow-300 mb-1">
                  <AlertCircle className="w-4 h-4" />
                  <span className="font-medium">Payment Instructions</span>
                </div>
                <ul className="text-yellow-200 space-y-1 text-left">
                  <li>• Open your payment app (PayTM, GPay, etc.)</li>
                  <li>• Scan the QR code above</li>
                  <li>• Complete the payment of ${orderAmount.toFixed(2)}</li>
                  <li>• Take a screenshot of the success screen</li>
                  <li>• Upload the screenshot below</li>
                </ul>
              </div>
            </CardContent>
          </Card>

          {/* Screenshot Upload Section */}
          <Card className="bg-black/40 border-green-500/20">
            <CardHeader>
              <CardTitle className="text-white">Upload Payment Proof</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div
                className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${
                  dragActive 
                    ? 'border-green-500 bg-green-500/10' 
                    : screenshot 
                      ? 'border-green-500 bg-green-500/5'
                      : 'border-gray-500 hover:border-green-500/50'
                }`}
                onDragEnter={handleDrag}
                onDragLeave={handleDrag}
                onDragOver={handleDrag}
                onDrop={handleDrop}
              >
                {screenshot ? (
                  <div className="space-y-2">
                    <CheckCircle className="w-8 h-8 text-green-400 mx-auto" />
                    <p className="text-green-400 font-medium">Screenshot uploaded!</p>
                    <p className="text-gray-400 text-sm">{screenshot.name}</p>
                    <Button
                      onClick={() => setScreenshot(null)}
                      variant="outline"
                      size="sm"
                      className="border-red-500/30 text-red-400 hover:bg-red-500 hover:text-white"
                    >
                      <X className="w-4 h-4 mr-1" />
                      Remove
                    </Button>
                  </div>
                ) : (
                  <div className="space-y-2">
                    <Upload className="w-8 h-8 text-gray-400 mx-auto" />
                    <p className="text-gray-300">Drop screenshot here or click to browse</p>
                    <p className="text-gray-500 text-xs">PNG, JPG up to 5MB</p>
                  </div>
                )}
              </div>

              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleFileInput}
                className="hidden"
              />

              <Button
                onClick={() => fileInputRef.current?.click()}
                variant="outline"
                className="w-full border-green-500/30 text-green-400 hover:bg-green-500 hover:text-black"
                disabled={!!screenshot}
              >
                <Upload className="w-4 h-4 mr-2" />
                {screenshot ? 'Screenshot Uploaded' : 'Choose Screenshot'}
              </Button>

              <Button
                onClick={handleSubmitPayment}
                disabled={!screenshot || isUploading || timeLeft <= 0}
                className="w-full bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white font-semibold"
              >
                {isUploading ? "Submitting..." : "Confirm Payment"}
              </Button>

              <p className="text-gray-400 text-xs text-center">
                Your payment will be verified within 24 hours. You'll receive email confirmation once approved.
              </p>
            </CardContent>
          </Card>
        </div>
      </DialogContent>
    </Dialog>
  );
}